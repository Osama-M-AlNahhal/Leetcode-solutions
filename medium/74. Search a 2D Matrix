Problem:
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

Solution:
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int start = 0;
        int end = matrix.length * matrix[0].length -1;
        int mid = 0;
        int numOfRows = matrix.length;
        int numOfCol = matrix[0].length;
        
        while (start <= end) {
            mid = start + (end - start)/2;
            if (matrix[mid/numOfCol][mid%numOfCol] == target) {
                return true;
            } else if (matrix[mid/numOfCol][mid%numOfCol] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }        
        return false;
        
    }
}
