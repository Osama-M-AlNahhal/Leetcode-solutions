Problem:
You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
The area of an island is the number of cells with a value 1 in the island.
Return the maximum area of an island in grid. If there is no island, return 0.

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

Solution:
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int maxLand = 0;
        int current = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    current = findLand(grid,i,j);
                    if (current > maxLand) {
                        maxLand = current;
                    }
                }
            }
        }
        return maxLand;
        
    }
    public int findLand(int[][]grid, int sr, int sc) {
        if (grid[sr][sc] == 0) {
            return 0;
        } else {
            int counter = 1;
            grid[sr][sc] = 0;
            
            //check the right cell
            if (sc < grid[0].length -1) {
                counter += findLand(grid,sr,sc+1);
            }
            
            //check the bottom cell
            if (sr < grid.length-1) {
                counter += findLand(grid,sr+1,sc);
            }
            //check the left cell
            if (sc > 0) {
                counter += findLand(grid,sr,sc-1);
            }
            //check the top cell
            if (sr > 0) {
                counter += findLand(grid,sr-1,sc);            
            }
            
            return counter;
        }
    }
     
}
