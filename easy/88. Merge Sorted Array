Problem:
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.


Constraints:
nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 

Follow up: Can you come up with an algorithm that runs in O(m + n) time?


Solution:
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int sortingIndex = nums1.length - 1;
        int nums1Index = m - 1;
        int nums2Index = n - 1;
        
        while (nums1Index >= 0 && nums2Index >= 0) {
            
            if (nums1[nums1Index] > nums2[nums2Index]) {
                
                nums1[sortingIndex] = nums1[nums1Index];
                sortingIndex--;
                nums1Index--;
                
            } else if (nums1[nums1Index] == nums2[nums2Index]) {
                
                nums1[sortingIndex] = nums1[nums1Index];
                sortingIndex--;
                nums1Index--;
                nums1[sortingIndex] = nums2[nums2Index];
                sortingIndex--;
                nums2Index--;
                
            } else {
                
                nums1[sortingIndex] = nums2[nums2Index];
                sortingIndex--;
                nums2Index--;
                
            }
        }
        
        if (nums1Index < 0) {
            
            for (int i = nums2Index; i >= 0; i--) {
                nums1[sortingIndex] = nums2[i];
                sortingIndex--;
            }
            
        } else {
            
            for (int i = nums1Index; i >= 0; i--) {
                nums1[sortingIndex] = nums1[i];
                sortingIndex--;
            }
            
        }
        
    }
}
