Problem: 
Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.


Constraints:
n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 
Follow-up: Could you solve the problem in linear time and in O(1) space?


Solution: 
class Solution {
    public int majorityElement(int[] nums) {
        int counter = 0;
        int check = nums[0];
        for (int walker : nums) {
            if (counter == 0) {
                check = walker;
            }
            if (walker == check) {
                counter++;
            } else {
                counter--;
            }
        }
        return check;
    }     
} 
